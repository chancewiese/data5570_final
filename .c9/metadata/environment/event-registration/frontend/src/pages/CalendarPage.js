{"filter":false,"title":"CalendarPage.js","tooltip":"/event-registration/frontend/src/pages/CalendarPage.js","undoManager":{"mark":8,"position":8,"stack":[[{"start":{"row":0,"column":0},"end":{"row":55,"column":28},"action":"insert","lines":["import React, { useEffect, useState } from 'react';","import { Container, Typography, Box, Alert, CircularProgress } from '@mui/material';","import axios from '../utils/axios';","import EventCalendar from '../components/EventCalendar';","","const CalendarPage = () => {","  const [events, setEvents] = useState([]);","  const [loading, setLoading] = useState(true);","  const [error, setError] = useState(null);","","  useEffect(() => {","    const fetchEvents = async () => {","      try {","        const response = await axios.get('/api/events/');","        setEvents(response.data);","        setError(null);","      } catch (err) {","        console.error('Error fetching events:', err);","        setError('Failed to load events');","      } finally {","        setLoading(false);","      }","    };","","    fetchEvents();","  }, []);","","  if (loading) {","    return (","      <Container sx={{ display: 'flex', justifyContent: 'center', mt: 4 }}>","        <CircularProgress />","      </Container>","    );","  }","","  if (error) {","    return (","      <Container maxWidth=\"lg\" sx={{ py: 4 }}>","        <Alert severity=\"error\">{error}</Alert>","      </Container>","    );","  }","","  return (","    <Container maxWidth=\"lg\" className=\"py-8\">","      <Box className=\"mb-6\">","        <Typography variant=\"h4\" component=\"h1\">","          Event Calendar","        </Typography>","      </Box>","      <EventCalendar events={events} />","    </Container>","  );","};","","export default CalendarPage;"],"id":1}],[{"start":{"row":0,"column":0},"end":{"row":1,"column":0},"action":"insert","lines":["",""],"id":2}],[{"start":{"row":0,"column":0},"end":{"row":0,"column":34},"action":"insert","lines":["// src/components/EventCalendar.js"],"id":3}],[{"start":{"row":0,"column":19},"end":{"row":0,"column":34},"action":"remove","lines":["ventCalendar.js"],"id":4},{"start":{"row":0,"column":18},"end":{"row":0,"column":19},"action":"remove","lines":["E"]}],[{"start":{"row":0,"column":18},"end":{"row":0,"column":19},"action":"insert","lines":["C"],"id":5},{"start":{"row":0,"column":19},"end":{"row":0,"column":20},"action":"insert","lines":["a"]},{"start":{"row":0,"column":20},"end":{"row":0,"column":21},"action":"insert","lines":["l"]},{"start":{"row":0,"column":21},"end":{"row":0,"column":22},"action":"insert","lines":["e"]},{"start":{"row":0,"column":22},"end":{"row":0,"column":23},"action":"insert","lines":["n"]},{"start":{"row":0,"column":23},"end":{"row":0,"column":24},"action":"insert","lines":["d"]},{"start":{"row":0,"column":24},"end":{"row":0,"column":25},"action":"insert","lines":["a"]},{"start":{"row":0,"column":25},"end":{"row":0,"column":26},"action":"insert","lines":["r"]},{"start":{"row":0,"column":26},"end":{"row":0,"column":27},"action":"insert","lines":["P"]},{"start":{"row":0,"column":27},"end":{"row":0,"column":28},"action":"insert","lines":["a"]},{"start":{"row":0,"column":28},"end":{"row":0,"column":29},"action":"insert","lines":["g"]},{"start":{"row":0,"column":29},"end":{"row":0,"column":30},"action":"insert","lines":["e"]}],[{"start":{"row":0,"column":30},"end":{"row":0,"column":31},"action":"insert","lines":["."],"id":6},{"start":{"row":0,"column":31},"end":{"row":0,"column":32},"action":"insert","lines":["j"]},{"start":{"row":0,"column":32},"end":{"row":0,"column":33},"action":"insert","lines":["s"]}],[{"start":{"row":0,"column":0},"end":{"row":56,"column":28},"action":"remove","lines":["// src/components/CalendarPage.js","import React, { useEffect, useState } from 'react';","import { Container, Typography, Box, Alert, CircularProgress } from '@mui/material';","import axios from '../utils/axios';","import EventCalendar from '../components/EventCalendar';","","const CalendarPage = () => {","  const [events, setEvents] = useState([]);","  const [loading, setLoading] = useState(true);","  const [error, setError] = useState(null);","","  useEffect(() => {","    const fetchEvents = async () => {","      try {","        const response = await axios.get('/api/events/');","        setEvents(response.data);","        setError(null);","      } catch (err) {","        console.error('Error fetching events:', err);","        setError('Failed to load events');","      } finally {","        setLoading(false);","      }","    };","","    fetchEvents();","  }, []);","","  if (loading) {","    return (","      <Container sx={{ display: 'flex', justifyContent: 'center', mt: 4 }}>","        <CircularProgress />","      </Container>","    );","  }","","  if (error) {","    return (","      <Container maxWidth=\"lg\" sx={{ py: 4 }}>","        <Alert severity=\"error\">{error}</Alert>","      </Container>","    );","  }","","  return (","    <Container maxWidth=\"lg\" className=\"py-8\">","      <Box className=\"mb-6\">","        <Typography variant=\"h4\" component=\"h1\">","          Event Calendar","        </Typography>","      </Box>","      <EventCalendar events={events} />","    </Container>","  );","};","","export default CalendarPage;"],"id":7},{"start":{"row":0,"column":0},"end":{"row":369,"column":29},"action":"insert","lines":["// src/components/CalendarPage.js","import React, { useEffect, useState } from 'react';","import { ","  Container, ","  Typography, ","  Box, ","  Alert, ","  CircularProgress,","  ToggleButton,","  ToggleButtonGroup","} from '@mui/material';","import axios from '../utils/axios';","import EventCalendar from '../components/EventCalendar';","import { useAuth } from '../context/AuthContext';","","const CalendarPage = () => {","  const { user } = useAuth();","  const [events, setEvents] = useState([]);","  const [loading, setLoading] = useState(true);","  const [error, setError] = useState(null);","  const [filter, setFilter] = useState('all');","","  useEffect(() => {","    const fetchEvents = async () => {","      try {","        const response = await axios.get('/api/events/');","        setEvents(response.data);","        setError(null);","      } catch (err) {","        console.error('Error fetching events:', err);","        setError('Failed to load events');","      } finally {","        setLoading(false);","      }","    };","","    fetchEvents();","  }, []);","","  const handleFilterChange = (event, newFilter) => {","    if (newFilter !== null) {","      setFilter(newFilter);","    }","  };","","  const filteredEvents = events.filter(event => {","    const isRegistered = event.registrations?.some(reg => reg.user.id === user?.id);","    switch (filter) {","      case 'registered':","        return isRegistered;","      case 'unregistered':","        return !isRegistered;","      default:","        return true;","    }","  });","","  if (loading) {","    return (","      <Container sx={{ display: 'flex', justifyContent: 'center', mt: 4 }}>","        <CircularProgress />","      </Container>","    );","  }","","  if (error) {","    return (","      <Container maxWidth=\"lg\" sx={{ py: 4 }}>","        <Alert severity=\"error\">{error}</Alert>","      </Container>","    );","  }","","  return (","    <Container maxWidth=\"lg\" sx={{ py: 4 }}>","      <Box sx={{ mb: 4 }}>","        <Typography variant=\"h4\" component=\"h1\" gutterBottom>","          Event Calendar","        </Typography>","        ","        {user && (","          <Box sx={{ mt: 2 }}>","            <ToggleButtonGroup","              value={filter}","              exclusive","              onChange={handleFilterChange}","              aria-label=\"event filter\"","              size=\"small\"","            >","              <ToggleButton value=\"all\" aria-label=\"all events\">","                All Events","              </ToggleButton>","              <ToggleButton value=\"registered\" aria-label=\"registered events\">","                My Registrations","              </ToggleButton>","              <ToggleButton value=\"unregistered\" aria-label=\"unregistered events\">","                Not Registered","              </ToggleButton>","            </ToggleButtonGroup>","          </Box>","        )}","      </Box>","      ","      <EventCalendar ","        events={filteredEvents}","        showEmptyMessage={filter !== 'all'}","        filterType={filter}","      />","    </Container>","  );","};","","export default CalendarPage;","","// src/components/EventCalendar.js","import React, { useMemo } from 'react';","import { useNavigate } from 'react-router-dom';","import { useAuth } from '../context/AuthContext';","import { ","  Paper, ","  Typography, ","  Box,","  Card,","  CardContent,","  IconButton,","  useTheme,","  Alert","} from '@mui/material';","import { ","  ChevronLeft as ChevronLeftIcon, ","  ChevronRight as ChevronRightIcon,","  CheckCircle as CheckCircleIcon,","  AccessTime as AccessTimeIcon","} from '@mui/icons-material';","","const EventCalendar = ({ events, showEmptyMessage = false, filterType = 'all' }) => {","  const navigate = useNavigate();","  const { user } = useAuth();","  const theme = useTheme();","  const [currentDate, setCurrentDate] = React.useState(new Date());","","  // Get the first day of the month","  const firstDayOfMonth = useMemo(() => {","    return new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);","  }, [currentDate]);","","  // Get the last day of the month","  const lastDayOfMonth = useMemo(() => {","    return new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);","  }, [currentDate]);","","  // Calculate calendar grid days","  const calendarDays = useMemo(() => {","    const days = [];","    const startDay = firstDayOfMonth.getDay();","    const totalDays = lastDayOfMonth.getDate();","    ","    // Add previous month's days","    for (let i = 0; i < startDay; i++) {","      const prevMonthDay = new Date(firstDayOfMonth);","      prevMonthDay.setDate(prevMonthDay.getDate() - (startDay - i));","      days.push({ date: prevMonthDay, isCurrentMonth: false });","    }","    ","    // Add current month's days","    for (let i = 1; i <= totalDays; i++) {","      const currentDay = new Date(firstDayOfMonth);","      currentDay.setDate(i);","      days.push({ date: currentDay, isCurrentMonth: true });","    }","    ","    // Add next month's days to complete the grid","    const remainingDays = 42 - days.length;","    for (let i = 1; i <= remainingDays; i++) {","      const nextMonthDay = new Date(lastDayOfMonth);","      nextMonthDay.setDate(lastDayOfMonth.getDate() + i);","      days.push({ date: nextMonthDay, isCurrentMonth: false });","    }","    ","    return days;","  }, [firstDayOfMonth, lastDayOfMonth]);","","  // Get events for a specific date","  const getEventsForDate = (date) => {","    return events.filter(event => {","      const eventDate = new Date(event.date + 'T00:00:00');","      return eventDate.toDateString() === date.toDateString();","    });","  };","","  const isRegisteredForEvent = (event) => {","    return event.registrations?.some(reg => reg.user.id === user?.id);","  };","","  const handlePrevMonth = () => {","    setCurrentDate(prev => new Date(prev.getFullYear(), prev.getMonth() - 1));","  };","","  const handleNextMonth = () => {","    setCurrentDate(prev => new Date(prev.getFullYear(), prev.getMonth() + 1));","  };","","  const handleEventClick = (event) => {","    navigate(`/events/${event.url_name}`);","  };","","  const formatTime = (timeString) => {","    const [hours, minutes] = timeString.split(':');","    const date = new Date();","    date.setHours(parseInt(hours), parseInt(minutes));","    return date.toLocaleTimeString([], { hour: 'numeric', minute: '2-digit' });","  };","","  // Show message if no events match the filter","  if (events.length === 0 && showEmptyMessage) {","    return (","      <Box sx={{ mt: 2 }}>","        <Alert severity=\"info\">","          {filterType === 'registered' ","            ? \"You haven't registered for any events yet.\"","            : \"No available events found.\"}","        </Alert>","      </Box>","    );","  }","","  return (","    <Paper sx={{ p: 4 }}>","      {/* Calendar Header */}","      <Box sx={{ ","        display: 'flex', ","        justifyContent: 'space-between', ","        alignItems: 'center', ","        mb: 4 ","      }}>","        <Typography variant=\"h5\" sx={{ fontWeight: 500 }}>","          {currentDate.toLocaleString('default', { month: 'long', year: 'numeric' })}","        </Typography>","        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>","          <IconButton onClick={handlePrevMonth} size=\"small\">","            <ChevronLeftIcon />","          </IconButton>","          <IconButton onClick={handleNextMonth} size=\"small\">","            <ChevronRightIcon />","          </IconButton>","        </Box>","      </Box>","","      {/* Calendar Grid */}","      <Box sx={{ ","        display: 'grid', ","        gridTemplateColumns: 'repeat(7, 1fr)', ","        gap: 1 ","      }}>","        {/* Weekday headers */}","        {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => (","          <Box ","            key={day} ","            sx={{ ","              p: 1, ","              textAlign: 'center', ","              fontWeight: 'medium' ","            }}","          >","            {day}","          </Box>","        ))}","","        {/* Calendar days */}","        {calendarDays.map(({ date, isCurrentMonth }, index) => {","          const dayEvents = getEventsForDate(date);","          const isToday = date.toDateString() === new Date().toDateString();","","          return (","            <Box","              key={index}","              sx={{","                minHeight: '120px',","                p: 1,","                border: 1,","                borderColor: isCurrentMonth ","                  ? 'divider'","                  : 'action.hover',","                borderRadius: 1,","                backgroundColor: isCurrentMonth ","                  ? 'background.paper' ","                  : 'action.hover',","                ...(isToday && {","                  borderColor: 'primary.main',","                  borderWidth: 2,","                })","              }}","            >","              <Typography","                sx={{","                  width: 28,","                  height: 28,","                  display: 'flex',","                  alignItems: 'center',","                  justifyContent: 'center',","                  borderRadius: '50%',","                  ...(isToday && {","                    backgroundColor: 'primary.main',","                    color: 'primary.contrastText',","                  })","                }}","              >","                {date.getDate()}","              </Typography>","              ","              <Box sx={{ mt: 1, display: 'flex', flexDirection: 'column', gap: 0.5 }}>","                {dayEvents.map(event => {","                  const isRegistered = isRegisteredForEvent(event);","                  return (","                    <Card","                      key={event.id}","                      onClick={() => handleEventClick(event)}","                      sx={{","                        cursor: 'pointer',","                        transition: 'all 0.2s',","                        '&:hover': {","                          transform: 'translateY(-2px)',","                          boxShadow: 2,","                          backgroundColor: 'action.hover'","                        }","                      }}","                    >","                      <CardContent sx={{ p: '8px !important' }}>","                        <Box>","                          <Typography ","                            variant=\"subtitle2\" ","                            noWrap ","                            sx={{ fontWeight: 500 }}","                          >","                            {event.title}","                          </Typography>","                          <Box sx={{ ","                            display: 'flex', ","                            alignItems: 'center', ","                            gap: 0.5 ","                          }}>","                            <AccessTimeIcon sx={{ fontSize: 16 }} />","                            <Typography variant=\"caption\">","                              {formatTime(event.time)}","                            </Typography>","                            {isRegistered && (","                              <CheckCircleIcon","                                sx={{","                                  color: 'success.main',","                                  fontSize: 16,","                                  ml: 0.5","                                }}","                              />","                            )}","                          </Box>","                        </Box>","                      </CardContent>","                    </Card>","                  );","                })}","              </Box>","            </Box>","          );","        })}","      </Box>","    </Paper>","  );","};","","export default EventCalendar;"]}],[{"start":{"row":114,"column":0},"end":{"row":369,"column":29},"action":"remove","lines":["// src/components/EventCalendar.js","import React, { useMemo } from 'react';","import { useNavigate } from 'react-router-dom';","import { useAuth } from '../context/AuthContext';","import { ","  Paper, ","  Typography, ","  Box,","  Card,","  CardContent,","  IconButton,","  useTheme,","  Alert","} from '@mui/material';","import { ","  ChevronLeft as ChevronLeftIcon, ","  ChevronRight as ChevronRightIcon,","  CheckCircle as CheckCircleIcon,","  AccessTime as AccessTimeIcon","} from '@mui/icons-material';","","const EventCalendar = ({ events, showEmptyMessage = false, filterType = 'all' }) => {","  const navigate = useNavigate();","  const { user } = useAuth();","  const theme = useTheme();","  const [currentDate, setCurrentDate] = React.useState(new Date());","","  // Get the first day of the month","  const firstDayOfMonth = useMemo(() => {","    return new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);","  }, [currentDate]);","","  // Get the last day of the month","  const lastDayOfMonth = useMemo(() => {","    return new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);","  }, [currentDate]);","","  // Calculate calendar grid days","  const calendarDays = useMemo(() => {","    const days = [];","    const startDay = firstDayOfMonth.getDay();","    const totalDays = lastDayOfMonth.getDate();","    ","    // Add previous month's days","    for (let i = 0; i < startDay; i++) {","      const prevMonthDay = new Date(firstDayOfMonth);","      prevMonthDay.setDate(prevMonthDay.getDate() - (startDay - i));","      days.push({ date: prevMonthDay, isCurrentMonth: false });","    }","    ","    // Add current month's days","    for (let i = 1; i <= totalDays; i++) {","      const currentDay = new Date(firstDayOfMonth);","      currentDay.setDate(i);","      days.push({ date: currentDay, isCurrentMonth: true });","    }","    ","    // Add next month's days to complete the grid","    const remainingDays = 42 - days.length;","    for (let i = 1; i <= remainingDays; i++) {","      const nextMonthDay = new Date(lastDayOfMonth);","      nextMonthDay.setDate(lastDayOfMonth.getDate() + i);","      days.push({ date: nextMonthDay, isCurrentMonth: false });","    }","    ","    return days;","  }, [firstDayOfMonth, lastDayOfMonth]);","","  // Get events for a specific date","  const getEventsForDate = (date) => {","    return events.filter(event => {","      const eventDate = new Date(event.date + 'T00:00:00');","      return eventDate.toDateString() === date.toDateString();","    });","  };","","  const isRegisteredForEvent = (event) => {","    return event.registrations?.some(reg => reg.user.id === user?.id);","  };","","  const handlePrevMonth = () => {","    setCurrentDate(prev => new Date(prev.getFullYear(), prev.getMonth() - 1));","  };","","  const handleNextMonth = () => {","    setCurrentDate(prev => new Date(prev.getFullYear(), prev.getMonth() + 1));","  };","","  const handleEventClick = (event) => {","    navigate(`/events/${event.url_name}`);","  };","","  const formatTime = (timeString) => {","    const [hours, minutes] = timeString.split(':');","    const date = new Date();","    date.setHours(parseInt(hours), parseInt(minutes));","    return date.toLocaleTimeString([], { hour: 'numeric', minute: '2-digit' });","  };","","  // Show message if no events match the filter","  if (events.length === 0 && showEmptyMessage) {","    return (","      <Box sx={{ mt: 2 }}>","        <Alert severity=\"info\">","          {filterType === 'registered' ","            ? \"You haven't registered for any events yet.\"","            : \"No available events found.\"}","        </Alert>","      </Box>","    );","  }","","  return (","    <Paper sx={{ p: 4 }}>","      {/* Calendar Header */}","      <Box sx={{ ","        display: 'flex', ","        justifyContent: 'space-between', ","        alignItems: 'center', ","        mb: 4 ","      }}>","        <Typography variant=\"h5\" sx={{ fontWeight: 500 }}>","          {currentDate.toLocaleString('default', { month: 'long', year: 'numeric' })}","        </Typography>","        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>","          <IconButton onClick={handlePrevMonth} size=\"small\">","            <ChevronLeftIcon />","          </IconButton>","          <IconButton onClick={handleNextMonth} size=\"small\">","            <ChevronRightIcon />","          </IconButton>","        </Box>","      </Box>","","      {/* Calendar Grid */}","      <Box sx={{ ","        display: 'grid', ","        gridTemplateColumns: 'repeat(7, 1fr)', ","        gap: 1 ","      }}>","        {/* Weekday headers */}","        {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => (","          <Box ","            key={day} ","            sx={{ ","              p: 1, ","              textAlign: 'center', ","              fontWeight: 'medium' ","            }}","          >","            {day}","          </Box>","        ))}","","        {/* Calendar days */}","        {calendarDays.map(({ date, isCurrentMonth }, index) => {","          const dayEvents = getEventsForDate(date);","          const isToday = date.toDateString() === new Date().toDateString();","","          return (","            <Box","              key={index}","              sx={{","                minHeight: '120px',","                p: 1,","                border: 1,","                borderColor: isCurrentMonth ","                  ? 'divider'","                  : 'action.hover',","                borderRadius: 1,","                backgroundColor: isCurrentMonth ","                  ? 'background.paper' ","                  : 'action.hover',","                ...(isToday && {","                  borderColor: 'primary.main',","                  borderWidth: 2,","                })","              }}","            >","              <Typography","                sx={{","                  width: 28,","                  height: 28,","                  display: 'flex',","                  alignItems: 'center',","                  justifyContent: 'center',","                  borderRadius: '50%',","                  ...(isToday && {","                    backgroundColor: 'primary.main',","                    color: 'primary.contrastText',","                  })","                }}","              >","                {date.getDate()}","              </Typography>","              ","              <Box sx={{ mt: 1, display: 'flex', flexDirection: 'column', gap: 0.5 }}>","                {dayEvents.map(event => {","                  const isRegistered = isRegisteredForEvent(event);","                  return (","                    <Card","                      key={event.id}","                      onClick={() => handleEventClick(event)}","                      sx={{","                        cursor: 'pointer',","                        transition: 'all 0.2s',","                        '&:hover': {","                          transform: 'translateY(-2px)',","                          boxShadow: 2,","                          backgroundColor: 'action.hover'","                        }","                      }}","                    >","                      <CardContent sx={{ p: '8px !important' }}>","                        <Box>","                          <Typography ","                            variant=\"subtitle2\" ","                            noWrap ","                            sx={{ fontWeight: 500 }}","                          >","                            {event.title}","                          </Typography>","                          <Box sx={{ ","                            display: 'flex', ","                            alignItems: 'center', ","                            gap: 0.5 ","                          }}>","                            <AccessTimeIcon sx={{ fontSize: 16 }} />","                            <Typography variant=\"caption\">","                              {formatTime(event.time)}","                            </Typography>","                            {isRegistered && (","                              <CheckCircleIcon","                                sx={{","                                  color: 'success.main',","                                  fontSize: 16,","                                  ml: 0.5","                                }}","                              />","                            )}","                          </Box>","                        </Box>","                      </CardContent>","                    </Card>","                  );","                })}","              </Box>","            </Box>","          );","        })}","      </Box>","    </Paper>","  );","};","","export default EventCalendar;"],"id":8}],[{"start":{"row":113,"column":0},"end":{"row":114,"column":0},"action":"remove","lines":["",""],"id":9},{"start":{"row":112,"column":28},"end":{"row":113,"column":0},"action":"remove","lines":["",""]}]]},"ace":{"folds":[],"scrolltop":1499,"scrollleft":0,"selection":{"start":{"row":112,"column":28},"end":{"row":112,"column":28},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":0,"state":"start","mode":"ace/mode/javascript"}},"timestamp":1733289790843,"hash":"7f0eaf766c3752bc9475393a334aa61787750810"}