{"filter":false,"title":"ThemeContext.js","tooltip":"/event-registration/frontend/src/context/ThemeContext.js","undoManager":{"mark":10,"position":10,"stack":[[{"start":{"row":0,"column":0},"end":{"row":57,"column":2},"action":"insert","lines":["// src/context/ThemeContext.js","import React, { createContext, useContext, useState, useEffect } from 'react';","import { ThemeProvider as MuiThemeProvider, createTheme } from '@mui/material';","","const ThemeContext = createContext(null);","","export const ThemeProvider = ({ children }) => {","  // Initialize theme from localStorage or default to 'light'","  const [mode, setMode] = useState(() => {","    const savedMode = localStorage.getItem('themeMode');","    return savedMode || 'light';","  });","","  // Create theme object based on mode","  const theme = createTheme({","    palette: {","      mode,","      ...(mode === 'dark' ? {","        // Dark mode customizations","        primary: {","          main: '#90caf9',","        },","        background: {","          default: '#121212',","          paper: '#1e1e1e',","        },","      } : {","        // Light mode customizations","        primary: {","          main: '#1976d2',","        },","      }),","    },","  });","","  // Toggle theme function","  const toggleTheme = () => {","    const newMode = mode === 'light' ? 'dark' : 'light';","    setMode(newMode);","    localStorage.setItem('themeMode', newMode);","  };","","  return (","    <ThemeContext.Provider value={{ mode, toggleTheme }}>","      <MuiThemeProvider theme={theme}>","        {children}","      </MuiThemeProvider>","    </ThemeContext.Provider>","  );","};","","export const useTheme = () => {","  const context = useContext(ThemeContext);","  if (!context) {","    throw new Error('useTheme must be used within a ThemeProvider');","  }","  return context;","};"],"id":1}],[{"start":{"row":0,"column":0},"end":{"row":57,"column":2},"action":"remove","lines":["// src/context/ThemeContext.js","import React, { createContext, useContext, useState, useEffect } from 'react';","import { ThemeProvider as MuiThemeProvider, createTheme } from '@mui/material';","","const ThemeContext = createContext(null);","","export const ThemeProvider = ({ children }) => {","  // Initialize theme from localStorage or default to 'light'","  const [mode, setMode] = useState(() => {","    const savedMode = localStorage.getItem('themeMode');","    return savedMode || 'light';","  });","","  // Create theme object based on mode","  const theme = createTheme({","    palette: {","      mode,","      ...(mode === 'dark' ? {","        // Dark mode customizations","        primary: {","          main: '#90caf9',","        },","        background: {","          default: '#121212',","          paper: '#1e1e1e',","        },","      } : {","        // Light mode customizations","        primary: {","          main: '#1976d2',","        },","      }),","    },","  });","","  // Toggle theme function","  const toggleTheme = () => {","    const newMode = mode === 'light' ? 'dark' : 'light';","    setMode(newMode);","    localStorage.setItem('themeMode', newMode);","  };","","  return (","    <ThemeContext.Provider value={{ mode, toggleTheme }}>","      <MuiThemeProvider theme={theme}>","        {children}","      </MuiThemeProvider>","    </ThemeContext.Provider>","  );","};","","export const useTheme = () => {","  const context = useContext(ThemeContext);","  if (!context) {","    throw new Error('useTheme must be used within a ThemeProvider');","  }","  return context;","};"],"id":2},{"start":{"row":0,"column":0},"end":{"row":2,"column":1},"action":"insert","lines":["# events/views.py (add to existing UserViewSet)","","f"]}],[{"start":{"row":0,"column":0},"end":{"row":2,"column":1},"action":"remove","lines":["# events/views.py (add to existing UserViewSet)","","f"],"id":3},{"start":{"row":0,"column":0},"end":{"row":125,"column":2},"action":"insert","lines":["// src/context/ThemeContext.js","import React, { createContext, useContext, useState, useEffect } from 'react';","import { ThemeProvider as MuiThemeProvider, createTheme } from '@mui/material';","import { useDispatch, useSelector } from 'react-redux';","import axios from '../utils/axios';","","const ThemeContext = createContext(null);","","// Helper to get system preference","const getSystemTheme = () => {","  if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {","    return 'dark';","  }","  return 'light';","};","","// Helper to get initial theme state","const getInitialTheme = () => {","  // First check localStorage for temporary override","  const savedTheme = localStorage.getItem('themeMode');","  if (savedTheme) return savedTheme;","","  // Then check system preferences","  return getSystemTheme();","};","","export const ThemeProvider = ({ children }) => {","  const dispatch = useDispatch();","  const [mode, setMode] = useState(getInitialTheme);","  const { user } = useSelector(state => state.auth);","","  // Create theme object","  const theme = createTheme({","    palette: {","      mode,","      ...(mode === 'dark' ? {","        primary: {","          main: '#90caf9',","        },","        background: {","          default: '#121212',","          paper: '#1e1e1e',","        },","      } : {","        primary: {","          main: '#1976d2',","        },","      }),","    },","  });","","  // Listen for system theme changes","  useEffect(() => {","    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');","    ","    const handleChange = (e) => {","      // Only update if no localStorage override exists","      if (!localStorage.getItem('themeMode')) {","        setMode(e.matches ? 'dark' : 'light');","      }","    };","","    mediaQuery.addEventListener('change', handleChange);","    return () => mediaQuery.removeEventListener('change', handleChange);","  }, []);","","  // Sync with user preferences when logged in","  useEffect(() => {","    const syncUserPreferences = async () => {","      if (user?.id && !localStorage.getItem('themeMode')) {","        try {","          const response = await axios.get(`/api/users/${user.id}/preferences/`);","          if (response.data.theme_mode) {","            setMode(response.data.theme_mode);","          }","        } catch (error) {","          console.error('Failed to fetch user theme preferences:', error);","        }","      }","    };","","    syncUserPreferences();","  }, [user]);","","  // Toggle theme function","  const toggleTheme = async () => {","    const newMode = mode === 'light' ? 'dark' : 'light';","    setMode(newMode);","    ","    // Always save to localStorage for immediate effect","    localStorage.setItem('themeMode', newMode);","","    // If user is logged in, sync with backend","    if (user?.id) {","      try {","        await axios.patch(`/api/users/${user.id}/preferences/`, {","          theme_mode: newMode","        });","      } catch (error) {","        console.error('Failed to update user theme preferences:', error);","      }","    }","  };","","  // Clear local theme override","  const resetToSystemTheme = () => {","    localStorage.removeItem('themeMode');","    setMode(getSystemTheme());","  };","","  return (","    <ThemeContext.Provider value={{ mode, toggleTheme, resetToSystemTheme }}>","      <MuiThemeProvider theme={theme}>","        {children}","      </MuiThemeProvider>","    </ThemeContext.Provider>","  );","};","","export const useTheme = () => {","  const context = useContext(ThemeContext);","  if (!context) {","    throw new Error('useTheme must be used within a ThemeProvider');","  }","  return context;","};"]}],[{"start":{"row":0,"column":30},"end":{"row":1,"column":0},"action":"insert","lines":["",""],"id":5}],[{"start":{"row":1,"column":0},"end":{"row":9,"column":2},"action":"insert","lines":["const isServer = typeof window === 'undefined';","const getLocalStorage = (key) => {","  if (isServer) return null;","  return window.localStorage.getItem(key);","};","const setLocalStorage = (key, value) => {","  if (isServer) return;","  window.localStorage.setItem(key, value);","};"],"id":6}],[{"start":{"row":1,"column":0},"end":{"row":9,"column":2},"action":"remove","lines":["const isServer = typeof window === 'undefined';","const getLocalStorage = (key) => {","  if (isServer) return null;","  return window.localStorage.getItem(key);","};","const setLocalStorage = (key, value) => {","  if (isServer) return;","  window.localStorage.setItem(key, value);","};"],"id":7}],[{"start":{"row":0,"column":30},"end":{"row":1,"column":0},"action":"remove","lines":["",""],"id":8}],[{"start":{"row":4,"column":35},"end":{"row":5,"column":0},"action":"insert","lines":["",""],"id":9},{"start":{"row":5,"column":0},"end":{"row":6,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":6,"column":0},"end":{"row":14,"column":2},"action":"insert","lines":["const isServer = typeof window === 'undefined';","const getLocalStorage = (key) => {","  if (isServer) return null;","  return window.localStorage.getItem(key);","};","const setLocalStorage = (key, value) => {","  if (isServer) return;","  window.localStorage.setItem(key, value);","};"],"id":10}],[{"start":{"row":0,"column":0},"end":{"row":135,"column":2},"action":"remove","lines":["// src/context/ThemeContext.js","import React, { createContext, useContext, useState, useEffect } from 'react';","import { ThemeProvider as MuiThemeProvider, createTheme } from '@mui/material';","import { useDispatch, useSelector } from 'react-redux';","import axios from '../utils/axios';","","const isServer = typeof window === 'undefined';","const getLocalStorage = (key) => {","  if (isServer) return null;","  return window.localStorage.getItem(key);","};","const setLocalStorage = (key, value) => {","  if (isServer) return;","  window.localStorage.setItem(key, value);","};","","const ThemeContext = createContext(null);","","// Helper to get system preference","const getSystemTheme = () => {","  if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {","    return 'dark';","  }","  return 'light';","};","","// Helper to get initial theme state","const getInitialTheme = () => {","  // First check localStorage for temporary override","  const savedTheme = localStorage.getItem('themeMode');","  if (savedTheme) return savedTheme;","","  // Then check system preferences","  return getSystemTheme();","};","","export const ThemeProvider = ({ children }) => {","  const dispatch = useDispatch();","  const [mode, setMode] = useState(getInitialTheme);","  const { user } = useSelector(state => state.auth);","","  // Create theme object","  const theme = createTheme({","    palette: {","      mode,","      ...(mode === 'dark' ? {","        primary: {","          main: '#90caf9',","        },","        background: {","          default: '#121212',","          paper: '#1e1e1e',","        },","      } : {","        primary: {","          main: '#1976d2',","        },","      }),","    },","  });","","  // Listen for system theme changes","  useEffect(() => {","    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');","    ","    const handleChange = (e) => {","      // Only update if no localStorage override exists","      if (!localStorage.getItem('themeMode')) {","        setMode(e.matches ? 'dark' : 'light');","      }","    };","","    mediaQuery.addEventListener('change', handleChange);","    return () => mediaQuery.removeEventListener('change', handleChange);","  }, []);","","  // Sync with user preferences when logged in","  useEffect(() => {","    const syncUserPreferences = async () => {","      if (user?.id && !localStorage.getItem('themeMode')) {","        try {","          const response = await axios.get(`/api/users/${user.id}/preferences/`);","          if (response.data.theme_mode) {","            setMode(response.data.theme_mode);","          }","        } catch (error) {","          console.error('Failed to fetch user theme preferences:', error);","        }","      }","    };","","    syncUserPreferences();","  }, [user]);","","  // Toggle theme function","  const toggleTheme = async () => {","    const newMode = mode === 'light' ? 'dark' : 'light';","    setMode(newMode);","    ","    // Always save to localStorage for immediate effect","    localStorage.setItem('themeMode', newMode);","","    // If user is logged in, sync with backend","    if (user?.id) {","      try {","        await axios.patch(`/api/users/${user.id}/preferences/`, {","          theme_mode: newMode","        });","      } catch (error) {","        console.error('Failed to update user theme preferences:', error);","      }","    }","  };","","  // Clear local theme override","  const resetToSystemTheme = () => {","    localStorage.removeItem('themeMode');","    setMode(getSystemTheme());","  };","","  return (","    <ThemeContext.Provider value={{ mode, toggleTheme, resetToSystemTheme }}>","      <MuiThemeProvider theme={theme}>","        {children}","      </MuiThemeProvider>","    </ThemeContext.Provider>","  );","};","","export const useTheme = () => {","  const context = useContext(ThemeContext);","  if (!context) {","    throw new Error('useTheme must be used within a ThemeProvider');","  }","  return context;","};"],"id":11},{"start":{"row":0,"column":0},"end":{"row":153,"column":2},"action":"insert","lines":["// src/context/ThemeContext.js","import React, { createContext, useContext, useState, useEffect } from 'react';","import { ThemeProvider as MuiThemeProvider, createTheme } from '@mui/material';","import { useDispatch, useSelector } from 'react-redux';","import axios from '../utils/axios';","","/* global localStorage */","","const ThemeContext = createContext(null);","","// Helper functions for storage and system preferences","const isServer = typeof window === 'undefined';","const getLocalStorage = (key) => {","  if (isServer) return null;","  try {","    return window.localStorage.getItem(key);","  } catch (e) {","    console.error('Local storage access failed:', e);","    return null;","  }","};","","const setLocalStorage = (key, value) => {","  if (isServer) return;","  try {","    window.localStorage.setItem(key, value);","  } catch (e) {","    console.error('Local storage set failed:', e);","  }","};","","const removeLocalStorage = (key) => {","  if (isServer) return;","  try {","    window.localStorage.removeItem(key);","  } catch (e) {","    console.error('Local storage remove failed:', e);","  }","};","","// Helper to get system preference","const getSystemTheme = () => {","  if (isServer) return 'light';","  return window.matchMedia?.('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';","};","","// Helper to get initial theme state","const getInitialTheme = () => {","  const savedTheme = getLocalStorage('themeMode');","  if (savedTheme) return savedTheme;","  return getSystemTheme();","};","","export const ThemeProvider = ({ children }) => {","  const dispatch = useDispatch();","  const [mode, setMode] = useState(getInitialTheme);","  const { user } = useSelector(state => state.auth);","","  // Create theme object","  const theme = createTheme({","    palette: {","      mode,","      ...(mode === 'dark' ? {","        primary: {","          main: '#90caf9',","        },","        background: {","          default: '#121212',","          paper: '#1e1e1e',","        },","      } : {","        primary: {","          main: '#1976d2',","        },","      }),","    },","  });","","  // Listen for system theme changes","  useEffect(() => {","    if (isServer) return;","","    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');","    ","    const handleChange = (e) => {","      if (!getLocalStorage('themeMode')) {","        setMode(e.matches ? 'dark' : 'light');","      }","    };","","    mediaQuery.addEventListener('change', handleChange);","    return () => mediaQuery.removeEventListener('change', handleChange);","  }, []);","","  // Sync with user preferences when logged in","  useEffect(() => {","    const syncUserPreferences = async () => {","      if (user?.id && !getLocalStorage('themeMode')) {","        try {","          const response = await axios.get(`/api/users/${user.id}/preferences/`);","          if (response.data.theme_mode) {","            setMode(response.data.theme_mode);","          }","        } catch (error) {","          console.error('Failed to fetch user theme preferences:', error);","        }","      }","    };","","    syncUserPreferences();","  }, [user]);","","  // Toggle theme function","  const toggleTheme = async () => {","    const newMode = mode === 'light' ? 'dark' : 'light';","    setMode(newMode);","    ","    // Save to localStorage for immediate effect","    setLocalStorage('themeMode', newMode);","","    // If user is logged in, sync with backend","    if (user?.id) {","      try {","        await axios.patch(`/api/users/${user.id}/preferences/`, {","          theme_mode: newMode","        });","      } catch (error) {","        console.error('Failed to update user theme preferences:', error);","      }","    }","  };","","  // Clear local theme override","  const resetToSystemTheme = () => {","    removeLocalStorage('themeMode');","    setMode(getSystemTheme());","  };","","  return (","    <ThemeContext.Provider value={{ mode, toggleTheme, resetToSystemTheme }}>","      <MuiThemeProvider theme={theme}>","        {children}","      </MuiThemeProvider>","    </ThemeContext.Provider>","  );","};","","export const useTheme = () => {","  const context = useContext(ThemeContext);","  if (!context) {","    throw new Error('useTheme must be used within a ThemeProvider');","  }","  return context;","};"]}],[{"start":{"row":0,"column":0},"end":{"row":153,"column":2},"action":"remove","lines":["// src/context/ThemeContext.js","import React, { createContext, useContext, useState, useEffect } from 'react';","import { ThemeProvider as MuiThemeProvider, createTheme } from '@mui/material';","import { useDispatch, useSelector } from 'react-redux';","import axios from '../utils/axios';","","/* global localStorage */","","const ThemeContext = createContext(null);","","// Helper functions for storage and system preferences","const isServer = typeof window === 'undefined';","const getLocalStorage = (key) => {","  if (isServer) return null;","  try {","    return window.localStorage.getItem(key);","  } catch (e) {","    console.error('Local storage access failed:', e);","    return null;","  }","};","","const setLocalStorage = (key, value) => {","  if (isServer) return;","  try {","    window.localStorage.setItem(key, value);","  } catch (e) {","    console.error('Local storage set failed:', e);","  }","};","","const removeLocalStorage = (key) => {","  if (isServer) return;","  try {","    window.localStorage.removeItem(key);","  } catch (e) {","    console.error('Local storage remove failed:', e);","  }","};","","// Helper to get system preference","const getSystemTheme = () => {","  if (isServer) return 'light';","  return window.matchMedia?.('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';","};","","// Helper to get initial theme state","const getInitialTheme = () => {","  const savedTheme = getLocalStorage('themeMode');","  if (savedTheme) return savedTheme;","  return getSystemTheme();","};","","export const ThemeProvider = ({ children }) => {","  const dispatch = useDispatch();","  const [mode, setMode] = useState(getInitialTheme);","  const { user } = useSelector(state => state.auth);","","  // Create theme object","  const theme = createTheme({","    palette: {","      mode,","      ...(mode === 'dark' ? {","        primary: {","          main: '#90caf9',","        },","        background: {","          default: '#121212',","          paper: '#1e1e1e',","        },","      } : {","        primary: {","          main: '#1976d2',","        },","      }),","    },","  });","","  // Listen for system theme changes","  useEffect(() => {","    if (isServer) return;","","    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');","    ","    const handleChange = (e) => {","      if (!getLocalStorage('themeMode')) {","        setMode(e.matches ? 'dark' : 'light');","      }","    };","","    mediaQuery.addEventListener('change', handleChange);","    return () => mediaQuery.removeEventListener('change', handleChange);","  }, []);","","  // Sync with user preferences when logged in","  useEffect(() => {","    const syncUserPreferences = async () => {","      if (user?.id && !getLocalStorage('themeMode')) {","        try {","          const response = await axios.get(`/api/users/${user.id}/preferences/`);","          if (response.data.theme_mode) {","            setMode(response.data.theme_mode);","          }","        } catch (error) {","          console.error('Failed to fetch user theme preferences:', error);","        }","      }","    };","","    syncUserPreferences();","  }, [user]);","","  // Toggle theme function","  const toggleTheme = async () => {","    const newMode = mode === 'light' ? 'dark' : 'light';","    setMode(newMode);","    ","    // Save to localStorage for immediate effect","    setLocalStorage('themeMode', newMode);","","    // If user is logged in, sync with backend","    if (user?.id) {","      try {","        await axios.patch(`/api/users/${user.id}/preferences/`, {","          theme_mode: newMode","        });","      } catch (error) {","        console.error('Failed to update user theme preferences:', error);","      }","    }","  };","","  // Clear local theme override","  const resetToSystemTheme = () => {","    removeLocalStorage('themeMode');","    setMode(getSystemTheme());","  };","","  return (","    <ThemeContext.Provider value={{ mode, toggleTheme, resetToSystemTheme }}>","      <MuiThemeProvider theme={theme}>","        {children}","      </MuiThemeProvider>","    </ThemeContext.Provider>","  );","};","","export const useTheme = () => {","  const context = useContext(ThemeContext);","  if (!context) {","    throw new Error('useTheme must be used within a ThemeProvider');","  }","  return context;","};"],"id":12},{"start":{"row":0,"column":0},"end":{"row":140,"column":2},"action":"insert","lines":["// src/context/ThemeContext.js","import React, { createContext, useContext, useState, useEffect } from 'react';","import { ThemeProvider as MuiThemeProvider, createTheme } from '@mui/material';","import { useSelector } from 'react-redux';","import axios from '../utils/axios';","","const ThemeContext = createContext(null);","","// Helper to get system preference","const getSystemTheme = () => {","  if (typeof window === 'undefined') return 'light';","  return window.matchMedia?.('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';","};","","// Storage helper functions","const storage = {","  get: (key) => {","    try {","      return window?.localStorage.getItem(key);","    } catch (e) {","      console.error('Local storage access failed:', e);","      return null;","    }","  },","  set: (key, value) => {","    try {","      window?.localStorage.setItem(key, value);","    } catch (e) {","      console.error('Local storage set failed:', e);","    }","  },","  remove: (key) => {","    try {","      window?.localStorage.removeItem(key);","    } catch (e) {","      console.error('Local storage remove failed:', e);","    }","  }","};","","export const ThemeProvider = ({ children }) => {","  const { user } = useSelector(state => state.auth);","  const [themeMode, setThemeMode] = useState(() => {","    const savedTheme = storage.get('themeMode');","    return savedTheme || 'system';","  });","","  // Get the actual theme based on theme mode selection","  const resolvedTheme = themeMode === 'system' ? getSystemTheme() : themeMode;","","  // Create theme object","  const theme = createTheme({","    palette: {","      mode: resolvedTheme,","      ...(resolvedTheme === 'dark' ? {","        primary: {","          main: '#90caf9',","        },","        background: {","          default: '#121212',","          paper: '#1e1e1e',","        },","      } : {","        primary: {","          main: '#1976d2',","        },","      }),","    },","  });","","  // Listen for system theme changes","  useEffect(() => {","    if (typeof window === 'undefined') return;","","    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');","    ","    const handleChange = () => {","      if (themeMode === 'system') {","        // Force a re-render when system theme changes and we're in system mode","        setThemeMode('system');","      }","    };","","    mediaQuery.addEventListener('change', handleChange);","    return () => mediaQuery.removeEventListener('change', handleChange);","  }, [themeMode]);","","  // Sync with user preferences when logged in","  useEffect(() => {","    const syncUserPreferences = async () => {","      if (user?.id) {","        try {","          const response = await axios.get(`/api/users/${user.id}/preferences/`);","          if (response.data.theme_mode) {","            setThemeMode(response.data.theme_mode);","            storage.set('themeMode', response.data.theme_mode);","          }","        } catch (error) {","          console.error('Failed to fetch user theme preferences:', error);","        }","      }","    };","","    syncUserPreferences();","  }, [user]);","","  const setTheme = async (newMode) => {","    setThemeMode(newMode);","    storage.set('themeMode', newMode);","","    if (user?.id) {","      try {","        await axios.patch(`/api/users/${user.id}/preferences/`, {","          theme_mode: newMode","        });","      } catch (error) {","        console.error('Failed to update user theme preferences:', error);","      }","    }","  };","","  return (","    <ThemeContext.Provider value={{ ","      themeMode,","      resolvedTheme, ","      setTheme ","    }}>","      <MuiThemeProvider theme={theme}>","        {children}","      </MuiThemeProvider>","    </ThemeContext.Provider>","  );","};","","export const useTheme = () => {","  const context = useContext(ThemeContext);","  if (!context) {","    throw new Error('useTheme must be used within a ThemeProvider');","  }","  return context;","};"]}]]},"ace":{"folds":[],"scrolltop":1863,"scrollleft":0,"selection":{"start":{"row":140,"column":2},"end":{"row":140,"column":2},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":152,"mode":"ace/mode/javascript"}},"timestamp":1733280184407,"hash":"eb98ef7f9e07be699044456f41e5e3293708c4b7"}