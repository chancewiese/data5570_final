{"filter":false,"title":"views.py","tooltip":"/event-registration/backend/events/views.py","undoManager":{"mark":27,"position":27,"stack":[[{"start":{"row":8,"column":39},"end":{"row":8,"column":40},"action":"insert","lines":[","],"id":2}],[{"start":{"row":8,"column":40},"end":{"row":8,"column":41},"action":"insert","lines":[" "],"id":3}],[{"start":{"row":8,"column":41},"end":{"row":8,"column":56},"action":"insert","lines":["UserPreferences"],"id":4}],[{"start":{"row":9,"column":80},"end":{"row":9,"column":81},"action":"insert","lines":[","],"id":5}],[{"start":{"row":9,"column":81},"end":{"row":9,"column":82},"action":"insert","lines":[" "],"id":6}],[{"start":{"row":9,"column":82},"end":{"row":9,"column":107},"action":"insert","lines":["UserPreferencesSerializer"],"id":7}],[{"start":{"row":91,"column":13},"end":{"row":92,"column":0},"action":"insert","lines":["",""],"id":8},{"start":{"row":92,"column":0},"end":{"row":92,"column":12},"action":"insert","lines":["            "]},{"start":{"row":92,"column":12},"end":{"row":93,"column":0},"action":"insert","lines":["",""]},{"start":{"row":93,"column":0},"end":{"row":93,"column":12},"action":"insert","lines":["            "]}],[{"start":{"row":93,"column":8},"end":{"row":93,"column":12},"action":"remove","lines":["    "],"id":9},{"start":{"row":93,"column":4},"end":{"row":93,"column":8},"action":"remove","lines":["    "]}],[{"start":{"row":93,"column":4},"end":{"row":107,"column":82},"action":"insert","lines":["@action(detail=True, methods=['GET', 'PATCH'])","    def preferences(self, request, pk=None):","        user = self.get_object()","        preferences, created = UserPreferences.objects.get_or_create(user=user)","","        if request.method == 'GET':","            serializer = UserPreferencesSerializer(preferences)","            return Response(serializer.data)","","        elif request.method == 'PATCH':","            serializer = UserPreferencesSerializer(preferences, data=request.data, partial=True)","            if serializer.is_valid():","                serializer.save()","                return Response(serializer.data)","            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)"],"id":10}],[{"start":{"row":92,"column":8},"end":{"row":92,"column":12},"action":"remove","lines":["    "],"id":11},{"start":{"row":92,"column":4},"end":{"row":92,"column":8},"action":"remove","lines":["    "]}],[{"start":{"row":1,"column":0},"end":{"row":215,"column":66},"action":"remove","lines":["from rest_framework import viewsets, status, permissions","from rest_framework.decorators import action","from rest_framework.response import Response","from django.contrib.auth.models import User","from django.shortcuts import get_object_or_404","from django.contrib.auth.password_validation import validate_password","from django.core.exceptions import ValidationError","from .models import Event, Registration, UserPreferences","from .serializers import EventSerializer, RegistrationSerializer, UserSerializer, UserPreferencesSerializer","","class IsStaffOrReadOnly(permissions.BasePermission):","    def has_permission(self, request, view):","        # Allow all read-only requests","        if request.method in permissions.SAFE_METHODS:","            return True","        ","        # Check if this is a registration action","        if view.action in ['register', 'registration']:","            return request.user.is_authenticated","            ","        # Only staff can create/edit/delete events","        return request.user.is_staff","","    def has_object_permission(self, request, view, obj):","        # Read permissions are allowed to any request","        if request.method in permissions.SAFE_METHODS:","            return True","            ","        # Check if this is a registration action","        if view.action in ['register', 'registration']:","            return request.user.is_authenticated","            ","        # Write permissions are only allowed to staff","        return request.user.is_staff","","class UserViewSet(viewsets.ModelViewSet):","    queryset = User.objects.all()","    serializer_class = UserSerializer","    ","    def get_permissions(self):","        if self.action == 'create':","            return [permissions.AllowAny()]","        return [permissions.IsAuthenticated()]","","    def create(self, request):","        try:","            print(\"Received data:\", request.data)","            required_fields = ['username', 'password', 'first_name', 'last_name']","            for field in required_fields:","                if not request.data.get(field):","                    return Response(","                        {field: 'This field is required.'},","                        status=status.HTTP_400_BAD_REQUEST","                    )","            ","            if User.objects.filter(username=request.data['username']).exists():","                return Response(","                    {'username': 'A user with this username already exists.'},","                    status=status.HTTP_400_BAD_REQUEST","                )","","            user = User(","                username=request.data['username'],","                email=request.data.get('email', ''),","                first_name=request.data['first_name'],","                last_name=request.data['last_name'],","                is_staff=request.data.get('is_staff', False)","            )","","            try:","                validate_password(request.data['password'], user)","            except ValidationError as e:","                return Response(","                    {'password': e.messages},","                    status=status.HTTP_400_BAD_REQUEST","                )","","            user.set_password(request.data['password'])","            user.save()","","            return Response(","                self.get_serializer(user).data,","                status=status.HTTP_201_CREATED","            )","","        except Exception as e:","            print(\"Error creating user:\", str(e))","            return Response(","                {'detail': str(e)},","                status=status.HTTP_400_BAD_REQUEST","            )","    ","    @action(detail=True, methods=['GET', 'PATCH'])","    def preferences(self, request, pk=None):","        user = self.get_object()","        preferences, created = UserPreferences.objects.get_or_create(user=user)","","        if request.method == 'GET':","            serializer = UserPreferencesSerializer(preferences)","            return Response(serializer.data)","","        elif request.method == 'PATCH':","            serializer = UserPreferencesSerializer(preferences, data=request.data, partial=True)","            if serializer.is_valid():","                serializer.save()","                return Response(serializer.data)","            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)","","    @action(detail=False, methods=['GET'])","    def me(self, request):","        if not request.user.is_authenticated:","            return Response(","                {'detail': 'Not authenticated'},","                status=status.HTTP_401_UNAUTHORIZED","            )","        serializer = self.get_serializer(request.user)","        return Response(serializer.data)","","    @action(detail=True, methods=['PATCH'])","    def toggle_admin(self, request, pk=None):","        try:","            user = self.get_object()","            user.is_staff = not user.is_staff","            user.save()","            return Response(","                self.get_serializer(user).data,","                status=status.HTTP_200_OK","            )","        except Exception as e:","            return Response(","                {'detail': str(e)},","                status=status.HTTP_400_BAD_REQUEST","            )","","class EventViewSet(viewsets.ModelViewSet):","    queryset = Event.objects.all()","    serializer_class = EventSerializer","    lookup_field = 'url_name'","    permission_classes = [permissions.IsAuthenticatedOrReadOnly, IsStaffOrReadOnly]","","    def get_queryset(self):","        return Event.objects.all().prefetch_related('registrations', 'registrations__user')","","    def perform_create(self, serializer):","        serializer.save(created_by=self.request.user)","","    @action(detail=True, methods=['POST'])","    def register(self, request, url_name=None):","        try:","            event = self.get_object()","            ","            if not request.user.is_authenticated:","                return Response(","                    {\"detail\": \"Authentication required\"},","                    status=status.HTTP_401_UNAUTHORIZED","                )","","            # Check if user is already registered","            if Registration.objects.filter(event=event, user=request.user).exists():","                return Response(","                    {\"detail\": \"You are already registered for this event\"},","                    status=status.HTTP_400_BAD_REQUEST","                )","","            # Check if event is full (only if there's a capacity limit)","            if event.capacity is not None and event.registrations.count() >= event.capacity:","                return Response(","                    {\"detail\": \"This event is fully booked\"},","                    status=status.HTTP_400_BAD_REQUEST","                )","","            # Create registration","            registration = Registration.objects.create(","                event=event,","                user=request.user,","                status='confirmed'","            )","            ","            serializer = RegistrationSerializer(registration)","            return Response(serializer.data, status=status.HTTP_201_CREATED)","            ","        except Exception as e:","            print(f\"Registration error: {str(e)}\")","            return Response(","                {\"detail\": str(e)},","                status=status.HTTP_500_INTERNAL_SERVER_ERROR","            )","","    @action(detail=True, methods=['DELETE'])","    def registration(self, request, url_name=None):","        event = self.get_object()","        ","        if not request.user.is_authenticated:","            return Response(","                {\"detail\": \"Authentication required\"},","                status=status.HTTP_401_UNAUTHORIZED","            )","","        try:","            registration = Registration.objects.get(event=event, user=request.user)","            registration.delete()","            return Response(status=status.HTTP_204_NO_CONTENT)","        except Registration.DoesNotExist:","            return Response(","                {\"detail\": \"You are not registered for this event\"},","                status=status.HTTP_404_NOT_FOUND","            )","","class RegistrationViewSet(viewsets.ModelViewSet):","    serializer_class = RegistrationSerializer","    permission_classes = [permissions.IsAuthenticated]","","    def get_queryset(self):","        # Always show only the user's own registrations","        return Registration.objects.filter(user=self.request.user)"],"id":12},{"start":{"row":1,"column":0},"end":{"row":328,"column":66},"action":"insert","lines":["from rest_framework import viewsets, status, permissions","from rest_framework.decorators import action","from rest_framework.response import Response","from rest_framework.parsers import MultiPartParser, FormParser","from django.contrib.auth.models import User","from django.shortcuts import get_object_or_404","from django.contrib.auth.password_validation import validate_password","from django.core.exceptions import ValidationError","from .models import Event, Registration, UserPreferences, EventImage","from .serializers import (","    EventSerializer, ","    RegistrationSerializer, ","    UserSerializer, ","    UserPreferencesSerializer,","    EventImageSerializer",")","from PIL import Image","import os","","class IsStaffOrReadOnly(permissions.BasePermission):","    def has_permission(self, request, view):","        if request.method in permissions.SAFE_METHODS:","            return True","        ","        if view.action in ['register', 'registration']:","            return request.user.is_authenticated","            ","        return request.user.is_staff","","    def has_object_permission(self, request, view, obj):","        if request.method in permissions.SAFE_METHODS:","            return True","            ","        if view.action in ['register', 'registration']:","            return request.user.is_authenticated","            ","        return request.user.is_staff","","class UserViewSet(viewsets.ModelViewSet):","    queryset = User.objects.all()","    serializer_class = UserSerializer","    ","    def get_permissions(self):","        if self.action == 'create':","            return [permissions.AllowAny()]","        return [permissions.IsAuthenticated()]","","    def create(self, request):","        try:","            required_fields = ['username', 'password', 'first_name', 'last_name']","            for field in required_fields:","                if not request.data.get(field):","                    return Response(","                        {field: 'This field is required.'},","                        status=status.HTTP_400_BAD_REQUEST","                    )","            ","            if User.objects.filter(username=request.data['username']).exists():","                return Response(","                    {'username': 'A user with this username already exists.'},","                    status=status.HTTP_400_BAD_REQUEST","                )","","            user = User(","                username=request.data['username'],","                email=request.data.get('email', ''),","                first_name=request.data['first_name'],","                last_name=request.data['last_name'],","                is_staff=request.data.get('is_staff', False)","            )","","            try:","                validate_password(request.data['password'], user)","            except ValidationError as e:","                return Response(","                    {'password': e.messages},","                    status=status.HTTP_400_BAD_REQUEST","                )","","            user.set_password(request.data['password'])","            user.save()","","            return Response(","                self.get_serializer(user).data,","                status=status.HTTP_201_CREATED","            )","","        except Exception as e:","            return Response(","                {'detail': str(e)},","                status=status.HTTP_400_BAD_REQUEST","            )","    ","    @action(detail=True, methods=['GET', 'PATCH'])","    def preferences(self, request, pk=None):","        user = self.get_object()","        preferences, created = UserPreferences.objects.get_or_create(user=user)","","        if request.method == 'GET':","            serializer = UserPreferencesSerializer(preferences)","            return Response(serializer.data)","","        elif request.method == 'PATCH':","            serializer = UserPreferencesSerializer(preferences, data=request.data, partial=True)","            if serializer.is_valid():","                serializer.save()","                return Response(serializer.data)","            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)","","    @action(detail=False, methods=['GET'])","    def me(self, request):","        if not request.user.is_authenticated:","            return Response(","                {'detail': 'Not authenticated'},","                status=status.HTTP_401_UNAUTHORIZED","            )","        serializer = self.get_serializer(request.user)","        return Response(serializer.data)","","    @action(detail=True, methods=['PATCH'])","    def toggle_admin(self, request, pk=None):","        try:","            user = self.get_object()","            user.is_staff = not user.is_staff","            user.save()","            return Response(","                self.get_serializer(user).data,","                status=status.HTTP_200_OK","            )","        except Exception as e:","            return Response(","                {'detail': str(e)},","                status=status.HTTP_400_BAD_REQUEST","            )","","class EventViewSet(viewsets.ModelViewSet):","    queryset = Event.objects.all()","    serializer_class = EventSerializer","    lookup_field = 'url_name'","    permission_classes = [permissions.IsAuthenticatedOrReadOnly, IsStaffOrReadOnly]","    parser_classes = (MultiPartParser, FormParser)","","    def get_queryset(self):","        return Event.objects.all().prefetch_related(","            'registrations', ","            'registrations__user',","            'images'","        )","","    def perform_create(self, serializer):","        serializer.save(created_by=self.request.user)","","    def validate_image(self, image):","        # Validate file size (max 5MB)","        if image.size > 5 * 1024 * 1024:","            raise ValidationError(\"Image file too large ( > 5MB )\")","        ","        # Validate file type","        try:","            img = Image.open(image)","            img.verify()","            if img.format.lower() not in ['jpeg', 'jpg', 'png', 'gif']:","                raise ValidationError(\"Unsupported image format\")","        except:","            raise ValidationError(\"Invalid image file\")","","    @action(detail=True, methods=['POST'])","    def upload_images(self, request, url_name=None):","        event = self.get_object()","        ","        if not request.user.is_staff:","            return Response(","                {\"detail\": \"Only staff can upload images\"},","                status=status.HTTP_403_FORBIDDEN","            )","","        try:","            images = request.FILES.getlist('images')","            captions = request.POST.getlist('captions', [])","            ","            if not images:","                return Response(","                    {\"detail\": \"No images provided\"},","                    status=status.HTTP_400_BAD_REQUEST","                )","","            uploaded_images = []","            for i, image in enumerate(images):","                try:","                    self.validate_image(image)","                    ","                    caption = captions[i] if i < len(captions) else \"\"","                    event_image = EventImage.objects.create(","                        event=event,","                        image=image,","                        caption=caption,","                        uploaded_by=request.user,","                        is_primary=i == 0 and not EventImage.objects.filter(event=event).exists()","                    )","                    uploaded_images.append(event_image)","                except ValidationError as e:","                    return Response(","                        {\"detail\": str(e)},","                        status=status.HTTP_400_BAD_REQUEST","                    )","","            serializer = EventImageSerializer(","                uploaded_images, ","                many=True,","                context={'request': request}","            )","            return Response(serializer.data, status=status.HTTP_201_CREATED)","","        except Exception as e:","            return Response(","                {\"detail\": str(e)},","                status=status.HTTP_500_INTERNAL_SERVER_ERROR","            )","","    @action(detail=True, methods=['DELETE'])","    def delete_image(self, request, url_name=None):","        event = self.get_object()","        image_id = request.data.get('image_id')","","        if not request.user.is_staff:","            return Response(","                {\"detail\": \"Only staff can delete images\"},","                status=status.HTTP_403_FORBIDDEN","            )","","        try:","            image = EventImage.objects.get(id=image_id, event=event)","            image.delete()","            return Response(status=status.HTTP_204_NO_CONTENT)","        except EventImage.DoesNotExist:","            return Response(","                {\"detail\": \"Image not found\"},","                status=status.HTTP_404_NOT_FOUND","            )","","    @action(detail=True, methods=['POST'])","    def set_primary_image(self, request, url_name=None):","        event = self.get_object()","        image_id = request.data.get('image_id')","","        if not request.user.is_staff:","            return Response(","                {\"detail\": \"Only staff can set primary image\"},","                status=status.HTTP_403_FORBIDDEN","            )","","        try:","            image = EventImage.objects.get(id=image_id, event=event)","            image.is_primary = True","            image.save()","            return Response(","                EventImageSerializer(image, context={'request': request}).data","            )","        except EventImage.DoesNotExist:","            return Response(","                {\"detail\": \"Image not found\"},","                status=status.HTTP_404_NOT_FOUND","            )","","    @action(detail=True, methods=['POST'])","    def register(self, request, url_name=None):","        try:","            event = self.get_object()","            ","            if not request.user.is_authenticated:","                return Response(","                    {\"detail\": \"Authentication required\"},","                    status=status.HTTP_401_UNAUTHORIZED","                )","","            if Registration.objects.filter(event=event, user=request.user).exists():","                return Response(","                    {\"detail\": \"You are already registered for this event\"},","                    status=status.HTTP_400_BAD_REQUEST","                )","","            if event.capacity is not None and event.registrations.count() >= event.capacity:","                return Response(","                    {\"detail\": \"This event is fully booked\"},","                    status=status.HTTP_400_BAD_REQUEST","                )","","            registration = Registration.objects.create(","                event=event,","                user=request.user,","                status='confirmed'","            )","            ","            serializer = RegistrationSerializer(registration)","            return Response(serializer.data, status=status.HTTP_201_CREATED)","            ","        except Exception as e:","            return Response(","                {\"detail\": str(e)},","                status=status.HTTP_500_INTERNAL_SERVER_ERROR","            )","","    @action(detail=True, methods=['DELETE'])","    def registration(self, request, url_name=None):","        event = self.get_object()","        ","        if not request.user.is_authenticated:","            return Response(","                {\"detail\": \"Authentication required\"},","                status=status.HTTP_401_UNAUTHORIZED","            )","","        try:","            registration = Registration.objects.get(event=event, user=request.user)","            registration.delete()","            return Response(status=status.HTTP_204_NO_CONTENT)","        except Registration.DoesNotExist:","            return Response(","                {\"detail\": \"You are not registered for this event\"},","                status=status.HTTP_404_NOT_FOUND","            )","","class RegistrationViewSet(viewsets.ModelViewSet):","    serializer_class = RegistrationSerializer","    permission_classes = [permissions.IsAuthenticated]","","    def get_queryset(self):","        return Registration.objects.filter(user=self.request.user)"]}],[{"start":{"row":220,"column":4},"end":{"row":239,"column":13},"action":"remove","lines":["@action(detail=True, methods=['DELETE'])","    def delete_image(self, request, url_name=None):","        event = self.get_object()","        image_id = request.data.get('image_id')","","        if not request.user.is_staff:","            return Response(","                {\"detail\": \"Only staff can delete images\"},","                status=status.HTTP_403_FORBIDDEN","            )","","        try:","            image = EventImage.objects.get(id=image_id, event=event)","            image.delete()","            return Response(status=status.HTTP_204_NO_CONTENT)","        except EventImage.DoesNotExist:","            return Response(","                {\"detail\": \"Image not found\"},","                status=status.HTTP_404_NOT_FOUND","            )"],"id":13},{"start":{"row":220,"column":4},"end":{"row":239,"column":9},"action":"insert","lines":["@action(detail=True, methods=['POST'])","def delete_image(self, request, url_name=None):","    event = self.get_object()","    image_id = request.POST.get('image_id')","","    if not request.user.is_staff:","        return Response(","            {\"detail\": \"Only staff can delete images\"},","            status=status.HTTP_403_FORBIDDEN","        )","","    try:","        image = EventImage.objects.get(id=image_id, event=event)","        image.delete()","        return Response(status=status.HTTP_204_NO_CONTENT)","    except EventImage.DoesNotExist:","        return Response(","            {\"detail\": \"Image not found\"},","            status=status.HTTP_404_NOT_FOUND","        )"]}],[{"start":{"row":221,"column":0},"end":{"row":221,"column":4},"action":"insert","lines":["    "],"id":14},{"start":{"row":222,"column":0},"end":{"row":222,"column":4},"action":"insert","lines":["    "]},{"start":{"row":223,"column":0},"end":{"row":223,"column":4},"action":"insert","lines":["    "]},{"start":{"row":224,"column":0},"end":{"row":224,"column":4},"action":"insert","lines":["    "]},{"start":{"row":225,"column":0},"end":{"row":225,"column":4},"action":"insert","lines":["    "]},{"start":{"row":226,"column":0},"end":{"row":226,"column":4},"action":"insert","lines":["    "]},{"start":{"row":227,"column":0},"end":{"row":227,"column":4},"action":"insert","lines":["    "]},{"start":{"row":228,"column":0},"end":{"row":228,"column":4},"action":"insert","lines":["    "]},{"start":{"row":229,"column":0},"end":{"row":229,"column":4},"action":"insert","lines":["    "]},{"start":{"row":230,"column":0},"end":{"row":230,"column":4},"action":"insert","lines":["    "]},{"start":{"row":231,"column":0},"end":{"row":231,"column":4},"action":"insert","lines":["    "]},{"start":{"row":232,"column":0},"end":{"row":232,"column":4},"action":"insert","lines":["    "]},{"start":{"row":233,"column":0},"end":{"row":233,"column":4},"action":"insert","lines":["    "]},{"start":{"row":234,"column":0},"end":{"row":234,"column":4},"action":"insert","lines":["    "]},{"start":{"row":235,"column":0},"end":{"row":235,"column":4},"action":"insert","lines":["    "]},{"start":{"row":236,"column":0},"end":{"row":236,"column":4},"action":"insert","lines":["    "]},{"start":{"row":237,"column":0},"end":{"row":237,"column":4},"action":"insert","lines":["    "]},{"start":{"row":238,"column":0},"end":{"row":238,"column":4},"action":"insert","lines":["    "]},{"start":{"row":239,"column":0},"end":{"row":239,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":264,"column":0},"end":{"row":265,"column":0},"action":"insert","lines":["",""],"id":17}],[{"start":{"row":265,"column":0},"end":{"row":265,"column":4},"action":"insert","lines":["    "],"id":18}],[{"start":{"row":265,"column":4},"end":{"row":300,"column":9},"action":"insert","lines":["@action(detail=True, methods=['POST'])","def reorder_images(self, request, url_name=None):","    event = self.get_object()","    image_id = request.data.get('image_id')","    direction = request.data.get('direction')  # 'left' or 'right'","    ","    try:","        image = EventImage.objects.get(id=image_id, event=event)","        current_order = image.order","        ","        if direction == 'left' and current_order > 0:","            # Swap with previous image","            prev_image = EventImage.objects.get(event=event, order=current_order - 1)","            prev_image.order = current_order","            image.order = current_order - 1","            prev_image.save()","            image.save()","        elif direction == 'right':","            # Swap with next image","            next_image = EventImage.objects.get(event=event, order=current_order + 1)","            next_image.order = current_order","            image.order = current_order + 1","            next_image.save()","            image.save()","        ","        return Response(status=status.HTTP_200_OK)","    except EventImage.DoesNotExist:","        return Response(","            {\"detail\": \"Image not found\"},","            status=status.HTTP_404_NOT_FOUND","        )","    except Exception as e:","        return Response(","            {\"detail\": str(e)},","            status=status.HTTP_400_BAD_REQUEST","        )"],"id":19}],[{"start":{"row":300,"column":9},"end":{"row":301,"column":0},"action":"insert","lines":["",""],"id":20},{"start":{"row":301,"column":0},"end":{"row":301,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":266,"column":0},"end":{"row":266,"column":4},"action":"insert","lines":["    "],"id":21},{"start":{"row":267,"column":0},"end":{"row":267,"column":4},"action":"insert","lines":["    "]},{"start":{"row":268,"column":0},"end":{"row":268,"column":4},"action":"insert","lines":["    "]},{"start":{"row":269,"column":0},"end":{"row":269,"column":4},"action":"insert","lines":["    "]},{"start":{"row":270,"column":0},"end":{"row":270,"column":4},"action":"insert","lines":["    "]},{"start":{"row":271,"column":0},"end":{"row":271,"column":4},"action":"insert","lines":["    "]},{"start":{"row":272,"column":0},"end":{"row":272,"column":4},"action":"insert","lines":["    "]},{"start":{"row":273,"column":0},"end":{"row":273,"column":4},"action":"insert","lines":["    "]},{"start":{"row":274,"column":0},"end":{"row":274,"column":4},"action":"insert","lines":["    "]},{"start":{"row":275,"column":0},"end":{"row":275,"column":4},"action":"insert","lines":["    "]},{"start":{"row":276,"column":0},"end":{"row":276,"column":4},"action":"insert","lines":["    "]},{"start":{"row":277,"column":0},"end":{"row":277,"column":4},"action":"insert","lines":["    "]},{"start":{"row":278,"column":0},"end":{"row":278,"column":4},"action":"insert","lines":["    "]},{"start":{"row":279,"column":0},"end":{"row":279,"column":4},"action":"insert","lines":["    "]},{"start":{"row":280,"column":0},"end":{"row":280,"column":4},"action":"insert","lines":["    "]},{"start":{"row":281,"column":0},"end":{"row":281,"column":4},"action":"insert","lines":["    "]},{"start":{"row":282,"column":0},"end":{"row":282,"column":4},"action":"insert","lines":["    "]},{"start":{"row":283,"column":0},"end":{"row":283,"column":4},"action":"insert","lines":["    "]},{"start":{"row":284,"column":0},"end":{"row":284,"column":4},"action":"insert","lines":["    "]},{"start":{"row":285,"column":0},"end":{"row":285,"column":4},"action":"insert","lines":["    "]},{"start":{"row":286,"column":0},"end":{"row":286,"column":4},"action":"insert","lines":["    "]},{"start":{"row":287,"column":0},"end":{"row":287,"column":4},"action":"insert","lines":["    "]},{"start":{"row":288,"column":0},"end":{"row":288,"column":4},"action":"insert","lines":["    "]},{"start":{"row":289,"column":0},"end":{"row":289,"column":4},"action":"insert","lines":["    "]},{"start":{"row":290,"column":0},"end":{"row":290,"column":4},"action":"insert","lines":["    "]},{"start":{"row":291,"column":0},"end":{"row":291,"column":4},"action":"insert","lines":["    "]},{"start":{"row":292,"column":0},"end":{"row":292,"column":4},"action":"insert","lines":["    "]},{"start":{"row":293,"column":0},"end":{"row":293,"column":4},"action":"insert","lines":["    "]},{"start":{"row":294,"column":0},"end":{"row":294,"column":4},"action":"insert","lines":["    "]},{"start":{"row":295,"column":0},"end":{"row":295,"column":4},"action":"insert","lines":["    "]},{"start":{"row":296,"column":0},"end":{"row":296,"column":4},"action":"insert","lines":["    "]},{"start":{"row":297,"column":0},"end":{"row":297,"column":4},"action":"insert","lines":["    "]},{"start":{"row":298,"column":0},"end":{"row":298,"column":4},"action":"insert","lines":["    "]},{"start":{"row":299,"column":0},"end":{"row":299,"column":4},"action":"insert","lines":["    "]},{"start":{"row":300,"column":0},"end":{"row":300,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":167,"column":4},"end":{"row":218,"column":13},"action":"remove","lines":["@action(detail=True, methods=['POST'])","    def upload_images(self, request, url_name=None):","        event = self.get_object()","        ","        if not request.user.is_staff:","            return Response(","                {\"detail\": \"Only staff can upload images\"},","                status=status.HTTP_403_FORBIDDEN","            )","","        try:","            images = request.FILES.getlist('images')","            captions = request.POST.getlist('captions', [])","            ","            if not images:","                return Response(","                    {\"detail\": \"No images provided\"},","                    status=status.HTTP_400_BAD_REQUEST","                )","","            uploaded_images = []","            for i, image in enumerate(images):","                try:","                    self.validate_image(image)","                    ","                    caption = captions[i] if i < len(captions) else \"\"","                    event_image = EventImage.objects.create(","                        event=event,","                        image=image,","                        caption=caption,","                        uploaded_by=request.user,","                        is_primary=i == 0 and not EventImage.objects.filter(event=event).exists()","                    )","                    uploaded_images.append(event_image)","                except ValidationError as e:","                    return Response(","                        {\"detail\": str(e)},","                        status=status.HTTP_400_BAD_REQUEST","                    )","","            serializer = EventImageSerializer(","                uploaded_images, ","                many=True,","                context={'request': request}","            )","            return Response(serializer.data, status=status.HTTP_201_CREATED)","","        except Exception as e:","            return Response(","                {\"detail\": str(e)},","                status=status.HTTP_500_INTERNAL_SERVER_ERROR","            )"],"id":23},{"start":{"row":167,"column":4},"end":{"row":223,"column":9},"action":"insert","lines":["@action(detail=True, methods=['POST'])","def upload_images(self, request, url_name=None):","    event = self.get_object()","    ","    if not request.user.is_staff:","        return Response(","            {\"detail\": \"Only staff can upload images\"},","            status=status.HTTP_403_FORBIDDEN","        )","","    try:","        images = request.FILES.getlist('images')","        captions = request.POST.getlist('captions', [])","        ","        if not images:","            return Response(","                {\"detail\": \"No images provided\"},","                status=status.HTTP_400_BAD_REQUEST","            )","","        # Get the highest current order","        last_order = EventImage.objects.filter(event=event).order_by('-order').first()","        next_order = (last_order.order + 1) if last_order else 0","","        uploaded_images = []","        for i, image in enumerate(images):","            try:","                self.validate_image(image)","                ","                caption = captions[i] if i < len(captions) else \"\"","                event_image = EventImage.objects.create(","                    event=event,","                    image=image,","                    caption=caption,","                    uploaded_by=request.user,","                    is_primary=i == 0 and not EventImage.objects.filter(event=event).exists(),","                    order=next_order + i  # Add this line","                )","                uploaded_images.append(event_image)","            except ValidationError as e:","                return Response(","                    {\"detail\": str(e)},","                    status=status.HTTP_400_BAD_REQUEST","                )","","        serializer = EventImageSerializer(","            uploaded_images, ","            many=True,","            context={'request': request}","        )","        return Response(serializer.data, status=status.HTTP_201_CREATED)","","    except Exception as e:","        return Response(","            {\"detail\": str(e)},","            status=status.HTTP_500_INTERNAL_SERVER_ERROR","        )"]}],[{"start":{"row":270,"column":4},"end":{"row":305,"column":13},"action":"remove","lines":["@action(detail=True, methods=['POST'])","    def reorder_images(self, request, url_name=None):","        event = self.get_object()","        image_id = request.data.get('image_id')","        direction = request.data.get('direction')  # 'left' or 'right'","        ","        try:","            image = EventImage.objects.get(id=image_id, event=event)","            current_order = image.order","            ","            if direction == 'left' and current_order > 0:","                # Swap with previous image","                prev_image = EventImage.objects.get(event=event, order=current_order - 1)","                prev_image.order = current_order","                image.order = current_order - 1","                prev_image.save()","                image.save()","            elif direction == 'right':","                # Swap with next image","                next_image = EventImage.objects.get(event=event, order=current_order + 1)","                next_image.order = current_order","                image.order = current_order + 1","                next_image.save()","                image.save()","            ","            return Response(status=status.HTTP_200_OK)","        except EventImage.DoesNotExist:","            return Response(","                {\"detail\": \"Image not found\"},","                status=status.HTTP_404_NOT_FOUND","            )","        except Exception as e:","            return Response(","                {\"detail\": str(e)},","                status=status.HTTP_400_BAD_REQUEST","            )"],"id":24},{"start":{"row":270,"column":4},"end":{"row":315,"column":9},"action":"insert","lines":["@action(detail=True, methods=['POST'])","def reorder_images(self, request, url_name=None):","    event = self.get_object()","    image_id = request.POST.get('image_id')","    direction = request.POST.get('direction')","    ","    if not request.user.is_staff:","        return Response(","            {\"detail\": \"Only staff can reorder images\"},","            status=status.HTTP_403_FORBIDDEN","        )","","    try:","        images = list(event.images.order_by('order'))","        current_index = next((i for i, img in enumerate(images) if str(img.id) == str(image_id)), None)","        ","        if current_index is None:","            return Response(","                {\"detail\": \"Image not found\"},","                status=status.HTTP_404_NOT_FOUND","            )","","        if direction == 'left' and current_index > 0:","            # Swap with previous image","            images[current_index], images[current_index - 1] = images[current_index - 1], images[current_index]","        elif direction == 'right' and current_index < len(images) - 1:","            # Swap with next image","            images[current_index], images[current_index + 1] = images[current_index + 1], images[current_index]","        else:","            return Response(","                {\"detail\": \"Cannot move image in that direction\"},","                status=status.HTTP_400_BAD_REQUEST","            )","","        # Update all orders","        for i, img in enumerate(images):","            img.order = i","            img.save()","","        return Response(status=status.HTTP_200_OK)","","    except Exception as e:","        return Response(","            {\"detail\": str(e)},","            status=status.HTTP_400_BAD_REQUEST","        )"]}],[{"start":{"row":271,"column":0},"end":{"row":271,"column":4},"action":"insert","lines":["    "],"id":25},{"start":{"row":272,"column":0},"end":{"row":272,"column":4},"action":"insert","lines":["    "]},{"start":{"row":273,"column":0},"end":{"row":273,"column":4},"action":"insert","lines":["    "]},{"start":{"row":274,"column":0},"end":{"row":274,"column":4},"action":"insert","lines":["    "]},{"start":{"row":275,"column":0},"end":{"row":275,"column":4},"action":"insert","lines":["    "]},{"start":{"row":276,"column":0},"end":{"row":276,"column":4},"action":"insert","lines":["    "]},{"start":{"row":277,"column":0},"end":{"row":277,"column":4},"action":"insert","lines":["    "]},{"start":{"row":278,"column":0},"end":{"row":278,"column":4},"action":"insert","lines":["    "]},{"start":{"row":279,"column":0},"end":{"row":279,"column":4},"action":"insert","lines":["    "]},{"start":{"row":280,"column":0},"end":{"row":280,"column":4},"action":"insert","lines":["    "]},{"start":{"row":281,"column":0},"end":{"row":281,"column":4},"action":"insert","lines":["    "]},{"start":{"row":282,"column":0},"end":{"row":282,"column":4},"action":"insert","lines":["    "]},{"start":{"row":283,"column":0},"end":{"row":283,"column":4},"action":"insert","lines":["    "]},{"start":{"row":284,"column":0},"end":{"row":284,"column":4},"action":"insert","lines":["    "]},{"start":{"row":285,"column":0},"end":{"row":285,"column":4},"action":"insert","lines":["    "]},{"start":{"row":286,"column":0},"end":{"row":286,"column":4},"action":"insert","lines":["    "]},{"start":{"row":287,"column":0},"end":{"row":287,"column":4},"action":"insert","lines":["    "]},{"start":{"row":288,"column":0},"end":{"row":288,"column":4},"action":"insert","lines":["    "]},{"start":{"row":289,"column":0},"end":{"row":289,"column":4},"action":"insert","lines":["    "]},{"start":{"row":290,"column":0},"end":{"row":290,"column":4},"action":"insert","lines":["    "]},{"start":{"row":291,"column":0},"end":{"row":291,"column":4},"action":"insert","lines":["    "]},{"start":{"row":292,"column":0},"end":{"row":292,"column":4},"action":"insert","lines":["    "]},{"start":{"row":293,"column":0},"end":{"row":293,"column":4},"action":"insert","lines":["    "]},{"start":{"row":294,"column":0},"end":{"row":294,"column":4},"action":"insert","lines":["    "]},{"start":{"row":295,"column":0},"end":{"row":295,"column":4},"action":"insert","lines":["    "]},{"start":{"row":296,"column":0},"end":{"row":296,"column":4},"action":"insert","lines":["    "]},{"start":{"row":297,"column":0},"end":{"row":297,"column":4},"action":"insert","lines":["    "]},{"start":{"row":298,"column":0},"end":{"row":298,"column":4},"action":"insert","lines":["    "]},{"start":{"row":299,"column":0},"end":{"row":299,"column":4},"action":"insert","lines":["    "]},{"start":{"row":300,"column":0},"end":{"row":300,"column":4},"action":"insert","lines":["    "]},{"start":{"row":301,"column":0},"end":{"row":301,"column":4},"action":"insert","lines":["    "]},{"start":{"row":302,"column":0},"end":{"row":302,"column":4},"action":"insert","lines":["    "]},{"start":{"row":303,"column":0},"end":{"row":303,"column":4},"action":"insert","lines":["    "]},{"start":{"row":304,"column":0},"end":{"row":304,"column":4},"action":"insert","lines":["    "]},{"start":{"row":305,"column":0},"end":{"row":305,"column":4},"action":"insert","lines":["    "]},{"start":{"row":306,"column":0},"end":{"row":306,"column":4},"action":"insert","lines":["    "]},{"start":{"row":307,"column":0},"end":{"row":307,"column":4},"action":"insert","lines":["    "]},{"start":{"row":308,"column":0},"end":{"row":308,"column":4},"action":"insert","lines":["    "]},{"start":{"row":309,"column":0},"end":{"row":309,"column":4},"action":"insert","lines":["    "]},{"start":{"row":310,"column":0},"end":{"row":310,"column":4},"action":"insert","lines":["    "]},{"start":{"row":311,"column":0},"end":{"row":311,"column":4},"action":"insert","lines":["    "]},{"start":{"row":312,"column":0},"end":{"row":312,"column":4},"action":"insert","lines":["    "]},{"start":{"row":313,"column":0},"end":{"row":313,"column":4},"action":"insert","lines":["    "]},{"start":{"row":314,"column":0},"end":{"row":314,"column":4},"action":"insert","lines":["    "]},{"start":{"row":315,"column":0},"end":{"row":315,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":168,"column":0},"end":{"row":168,"column":4},"action":"insert","lines":["    "],"id":26},{"start":{"row":169,"column":0},"end":{"row":169,"column":4},"action":"insert","lines":["    "]},{"start":{"row":170,"column":0},"end":{"row":170,"column":4},"action":"insert","lines":["    "]},{"start":{"row":171,"column":0},"end":{"row":171,"column":4},"action":"insert","lines":["    "]},{"start":{"row":172,"column":0},"end":{"row":172,"column":4},"action":"insert","lines":["    "]},{"start":{"row":173,"column":0},"end":{"row":173,"column":4},"action":"insert","lines":["    "]},{"start":{"row":174,"column":0},"end":{"row":174,"column":4},"action":"insert","lines":["    "]},{"start":{"row":175,"column":0},"end":{"row":175,"column":4},"action":"insert","lines":["    "]},{"start":{"row":176,"column":0},"end":{"row":176,"column":4},"action":"insert","lines":["    "]},{"start":{"row":177,"column":0},"end":{"row":177,"column":4},"action":"insert","lines":["    "]},{"start":{"row":178,"column":0},"end":{"row":178,"column":4},"action":"insert","lines":["    "]},{"start":{"row":179,"column":0},"end":{"row":179,"column":4},"action":"insert","lines":["    "]},{"start":{"row":180,"column":0},"end":{"row":180,"column":4},"action":"insert","lines":["    "]},{"start":{"row":181,"column":0},"end":{"row":181,"column":4},"action":"insert","lines":["    "]},{"start":{"row":182,"column":0},"end":{"row":182,"column":4},"action":"insert","lines":["    "]},{"start":{"row":183,"column":0},"end":{"row":183,"column":4},"action":"insert","lines":["    "]},{"start":{"row":184,"column":0},"end":{"row":184,"column":4},"action":"insert","lines":["    "]},{"start":{"row":185,"column":0},"end":{"row":185,"column":4},"action":"insert","lines":["    "]},{"start":{"row":186,"column":0},"end":{"row":186,"column":4},"action":"insert","lines":["    "]},{"start":{"row":187,"column":0},"end":{"row":187,"column":4},"action":"insert","lines":["    "]},{"start":{"row":188,"column":0},"end":{"row":188,"column":4},"action":"insert","lines":["    "]},{"start":{"row":189,"column":0},"end":{"row":189,"column":4},"action":"insert","lines":["    "]},{"start":{"row":190,"column":0},"end":{"row":190,"column":4},"action":"insert","lines":["    "]},{"start":{"row":191,"column":0},"end":{"row":191,"column":4},"action":"insert","lines":["    "]},{"start":{"row":192,"column":0},"end":{"row":192,"column":4},"action":"insert","lines":["    "]},{"start":{"row":193,"column":0},"end":{"row":193,"column":4},"action":"insert","lines":["    "]},{"start":{"row":194,"column":0},"end":{"row":194,"column":4},"action":"insert","lines":["    "]},{"start":{"row":195,"column":0},"end":{"row":195,"column":4},"action":"insert","lines":["    "]},{"start":{"row":196,"column":0},"end":{"row":196,"column":4},"action":"insert","lines":["    "]},{"start":{"row":197,"column":0},"end":{"row":197,"column":4},"action":"insert","lines":["    "]},{"start":{"row":198,"column":0},"end":{"row":198,"column":4},"action":"insert","lines":["    "]},{"start":{"row":199,"column":0},"end":{"row":199,"column":4},"action":"insert","lines":["    "]},{"start":{"row":200,"column":0},"end":{"row":200,"column":4},"action":"insert","lines":["    "]},{"start":{"row":201,"column":0},"end":{"row":201,"column":4},"action":"insert","lines":["    "]},{"start":{"row":202,"column":0},"end":{"row":202,"column":4},"action":"insert","lines":["    "]},{"start":{"row":203,"column":0},"end":{"row":203,"column":4},"action":"insert","lines":["    "]},{"start":{"row":204,"column":0},"end":{"row":204,"column":4},"action":"insert","lines":["    "]},{"start":{"row":205,"column":0},"end":{"row":205,"column":4},"action":"insert","lines":["    "]},{"start":{"row":206,"column":0},"end":{"row":206,"column":4},"action":"insert","lines":["    "]},{"start":{"row":207,"column":0},"end":{"row":207,"column":4},"action":"insert","lines":["    "]},{"start":{"row":208,"column":0},"end":{"row":208,"column":4},"action":"insert","lines":["    "]},{"start":{"row":209,"column":0},"end":{"row":209,"column":4},"action":"insert","lines":["    "]},{"start":{"row":210,"column":0},"end":{"row":210,"column":4},"action":"insert","lines":["    "]},{"start":{"row":211,"column":0},"end":{"row":211,"column":4},"action":"insert","lines":["    "]},{"start":{"row":212,"column":0},"end":{"row":212,"column":4},"action":"insert","lines":["    "]},{"start":{"row":213,"column":0},"end":{"row":213,"column":4},"action":"insert","lines":["    "]},{"start":{"row":214,"column":0},"end":{"row":214,"column":4},"action":"insert","lines":["    "]},{"start":{"row":215,"column":0},"end":{"row":215,"column":4},"action":"insert","lines":["    "]},{"start":{"row":216,"column":0},"end":{"row":216,"column":4},"action":"insert","lines":["    "]},{"start":{"row":217,"column":0},"end":{"row":217,"column":4},"action":"insert","lines":["    "]},{"start":{"row":218,"column":0},"end":{"row":218,"column":4},"action":"insert","lines":["    "]},{"start":{"row":219,"column":0},"end":{"row":219,"column":4},"action":"insert","lines":["    "]},{"start":{"row":220,"column":0},"end":{"row":220,"column":4},"action":"insert","lines":["    "]},{"start":{"row":221,"column":0},"end":{"row":221,"column":4},"action":"insert","lines":["    "]},{"start":{"row":222,"column":0},"end":{"row":222,"column":4},"action":"insert","lines":["    "]},{"start":{"row":223,"column":0},"end":{"row":223,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":270,"column":4},"end":{"row":315,"column":13},"action":"remove","lines":["@action(detail=True, methods=['POST'])","    def reorder_images(self, request, url_name=None):","        event = self.get_object()","        image_id = request.POST.get('image_id')","        direction = request.POST.get('direction')","        ","        if not request.user.is_staff:","            return Response(","                {\"detail\": \"Only staff can reorder images\"},","                status=status.HTTP_403_FORBIDDEN","            )","    ","        try:","            images = list(event.images.order_by('order'))","            current_index = next((i for i, img in enumerate(images) if str(img.id) == str(image_id)), None)","            ","            if current_index is None:","                return Response(","                    {\"detail\": \"Image not found\"},","                    status=status.HTTP_404_NOT_FOUND","                )","    ","            if direction == 'left' and current_index > 0:","                # Swap with previous image","                images[current_index], images[current_index - 1] = images[current_index - 1], images[current_index]","            elif direction == 'right' and current_index < len(images) - 1:","                # Swap with next image","                images[current_index], images[current_index + 1] = images[current_index + 1], images[current_index]","            else:","                return Response(","                    {\"detail\": \"Cannot move image in that direction\"},","                    status=status.HTTP_400_BAD_REQUEST","                )","    ","            # Update all orders","            for i, img in enumerate(images):","                img.order = i","                img.save()","    ","            return Response(status=status.HTTP_200_OK)","    ","        except Exception as e:","            return Response(","                {\"detail\": str(e)},","                status=status.HTTP_400_BAD_REQUEST","            )"],"id":27},{"start":{"row":270,"column":4},"end":{"row":305,"column":9},"action":"insert","lines":["@action(detail=True, methods=['POST'])","def reorder_images(self, request, url_name=None):","    event = self.get_object()","    image_id = request.data.get('image_id')","    direction = request.data.get('direction')","    ","    try:","        image = event.images.get(id=image_id)","        current_order = image.order","        ","        if direction == 'left' and current_order > 0:","            # Swap with the image to the left","            other_image = event.images.filter(order=current_order - 1).first()","            if other_image:","                image.order, other_image.order = other_image.order, image.order","                image.save()","                other_image.save()","        elif direction == 'right':","            # Swap with the image to the right","            other_image = event.images.filter(order=current_order + 1).first()","            if other_image:","                image.order, other_image.order = other_image.order, image.order","                image.save()","                other_image.save()","                ","        return Response({'status': 'success'})","    except EventImage.DoesNotExist:","        return Response(","            {'detail': 'Image not found'},","            status=status.HTTP_404_NOT_FOUND","        )","    except Exception as e:","        return Response(","            {'detail': str(e)},","            status=status.HTTP_400_BAD_REQUEST","        )"]}],[{"start":{"row":271,"column":0},"end":{"row":271,"column":4},"action":"insert","lines":["    "],"id":28},{"start":{"row":272,"column":0},"end":{"row":272,"column":4},"action":"insert","lines":["    "]},{"start":{"row":273,"column":0},"end":{"row":273,"column":4},"action":"insert","lines":["    "]},{"start":{"row":274,"column":0},"end":{"row":274,"column":4},"action":"insert","lines":["    "]},{"start":{"row":275,"column":0},"end":{"row":275,"column":4},"action":"insert","lines":["    "]},{"start":{"row":276,"column":0},"end":{"row":276,"column":4},"action":"insert","lines":["    "]},{"start":{"row":277,"column":0},"end":{"row":277,"column":4},"action":"insert","lines":["    "]},{"start":{"row":278,"column":0},"end":{"row":278,"column":4},"action":"insert","lines":["    "]},{"start":{"row":279,"column":0},"end":{"row":279,"column":4},"action":"insert","lines":["    "]},{"start":{"row":280,"column":0},"end":{"row":280,"column":4},"action":"insert","lines":["    "]},{"start":{"row":281,"column":0},"end":{"row":281,"column":4},"action":"insert","lines":["    "]},{"start":{"row":282,"column":0},"end":{"row":282,"column":4},"action":"insert","lines":["    "]},{"start":{"row":283,"column":0},"end":{"row":283,"column":4},"action":"insert","lines":["    "]},{"start":{"row":284,"column":0},"end":{"row":284,"column":4},"action":"insert","lines":["    "]},{"start":{"row":285,"column":0},"end":{"row":285,"column":4},"action":"insert","lines":["    "]},{"start":{"row":286,"column":0},"end":{"row":286,"column":4},"action":"insert","lines":["    "]},{"start":{"row":287,"column":0},"end":{"row":287,"column":4},"action":"insert","lines":["    "]},{"start":{"row":288,"column":0},"end":{"row":288,"column":4},"action":"insert","lines":["    "]},{"start":{"row":289,"column":0},"end":{"row":289,"column":4},"action":"insert","lines":["    "]},{"start":{"row":290,"column":0},"end":{"row":290,"column":4},"action":"insert","lines":["    "]},{"start":{"row":291,"column":0},"end":{"row":291,"column":4},"action":"insert","lines":["    "]},{"start":{"row":292,"column":0},"end":{"row":292,"column":4},"action":"insert","lines":["    "]},{"start":{"row":293,"column":0},"end":{"row":293,"column":4},"action":"insert","lines":["    "]},{"start":{"row":294,"column":0},"end":{"row":294,"column":4},"action":"insert","lines":["    "]},{"start":{"row":295,"column":0},"end":{"row":295,"column":4},"action":"insert","lines":["    "]},{"start":{"row":296,"column":0},"end":{"row":296,"column":4},"action":"insert","lines":["    "]},{"start":{"row":297,"column":0},"end":{"row":297,"column":4},"action":"insert","lines":["    "]},{"start":{"row":298,"column":0},"end":{"row":298,"column":4},"action":"insert","lines":["    "]},{"start":{"row":299,"column":0},"end":{"row":299,"column":4},"action":"insert","lines":["    "]},{"start":{"row":300,"column":0},"end":{"row":300,"column":4},"action":"insert","lines":["    "]},{"start":{"row":301,"column":0},"end":{"row":301,"column":4},"action":"insert","lines":["    "]},{"start":{"row":302,"column":0},"end":{"row":302,"column":4},"action":"insert","lines":["    "]},{"start":{"row":303,"column":0},"end":{"row":303,"column":4},"action":"insert","lines":["    "]},{"start":{"row":304,"column":0},"end":{"row":304,"column":4},"action":"insert","lines":["    "]},{"start":{"row":305,"column":0},"end":{"row":305,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":3,"column":44},"end":{"row":4,"column":0},"action":"insert","lines":["",""],"id":29}],[{"start":{"row":4,"column":0},"end":{"row":4,"column":33},"action":"insert","lines":["from rest_framework import status"],"id":30}],[{"start":{"row":4,"column":0},"end":{"row":4,"column":33},"action":"remove","lines":["from rest_framework import status"],"id":31},{"start":{"row":3,"column":44},"end":{"row":4,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":270,"column":4},"end":{"row":305,"column":13},"action":"remove","lines":["@action(detail=True, methods=['POST'])","    def reorder_images(self, request, url_name=None):","        event = self.get_object()","        image_id = request.data.get('image_id')","        direction = request.data.get('direction')","        ","        try:","            image = event.images.get(id=image_id)","            current_order = image.order","            ","            if direction == 'left' and current_order > 0:","                # Swap with the image to the left","                other_image = event.images.filter(order=current_order - 1).first()","                if other_image:","                    image.order, other_image.order = other_image.order, image.order","                    image.save()","                    other_image.save()","            elif direction == 'right':","                # Swap with the image to the right","                other_image = event.images.filter(order=current_order + 1).first()","                if other_image:","                    image.order, other_image.order = other_image.order, image.order","                    image.save()","                    other_image.save()","                    ","            return Response({'status': 'success'})","        except EventImage.DoesNotExist:","            return Response(","                {'detail': 'Image not found'},","                status=status.HTTP_404_NOT_FOUND","            )","        except Exception as e:","            return Response(","                {'detail': str(e)},","                status=status.HTTP_400_BAD_REQUEST","            )"],"id":32},{"start":{"row":270,"column":4},"end":{"row":312,"column":13},"action":"insert","lines":["@action(detail=True, methods=['POST'])","    def reorder_images(self, request, url_name=None):","        event = self.get_object()","        image_id = request.data.get('image_id')","        direction = request.data.get('direction')","        ","        try:","            # Get all images for this event, ordered by current order","            images = list(event.images.all().order_by('order'))","            current_image = next((img for img in images if str(img.id) == str(image_id)), None)","            ","            if not current_image:","                return Response(","                    {'detail': 'Image not found'},","                    status=status.HTTP_404_NOT_FOUND","                )","            ","            current_index = images.index(current_image)","            ","            if direction == 'left' and current_index > 0:","                # Swap with previous image","                previous_image = images[current_index - 1]","                current_image.order, previous_image.order = previous_image.order, current_image.order","                current_image.save()","                previous_image.save()","                ","            elif direction == 'right' and current_index < len(images) - 1:","                # Swap with next image","                next_image = images[current_index + 1]","                current_image.order, next_image.order = next_image.order, current_image.order","                current_image.save()","                next_image.save()","            ","            # Return updated image list","            serializer = self.get_serializer(event)","            return Response(serializer.data)","            ","        except Exception as e:","            print(f\"Error reordering images: {str(e)}\")  # Debug log","            return Response(","                {'detail': 'Failed to reorder images'},","                status=status.HTTP_400_BAD_REQUEST","            )"]}]]},"ace":{"folds":[],"scrolltop":3861.5,"scrollleft":0,"selection":{"start":{"row":312,"column":13},"end":{"row":312,"column":13},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1733443333766,"hash":"b9121373d9374b6c4be3a84c2b0989a2a21f200b"}